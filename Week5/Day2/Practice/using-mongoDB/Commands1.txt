//Create a database called 'my_first_db'.//
>use my_first_db

//Create students collection.//
>db.createCollection("students")

//Each document you insert into this collection should have the following 
//format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, 
//birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})

>db.students.insert({name:"Alice", home_state:"Texas", lucky_number:7, birthday:{month:8, day:15, year:1983}}),

//Create 5 students with the appropriate info.
>db.students.insert({"name": "Alice", "home_state":"Tex
as","lucky_number":13,"birthday":{"month":8,"day":20,"year":1976}})

>db.students.insert({"name": "Bob","home_state":"California","luck
y_number":42,"birthday":{"month":10,"day":15,"year":1985}})

>db.students.insert({"name": "Charlie","home_state":"Florida","lu
cky_number":7,"birthday":{"month":9,"day":10,"year":1990}})

>db.students.insert({"name": "David","home_state":"New York","luc
ky_number":5,"birthday":{"month":11,"day":15,"year":1973}})

>db.students.insert({"name": "Eve","home_state":"Washington",
"lucky_number":31,"birthday":{"month":6,"day":21,"year":1981}})

//Get all students//
>db.students.find().pretty()
{
	"_id" : ObjectId("61550237246358961f04babc"),
	"name" : "Alice",
	"home_state" : "Texas",
	"lucky_number" : 13,
	"birthday" : {
		"month" : 8,
		"day" : 20,
		"year" : 1976
	}
}
{
	"_id" : ObjectId("61550294246358961f04babd"),
	"name" : "Bob",
	"home_state" : "California",
	"lucky_number" : 42,
	"birthday" : {
		"month" : 10,
		"day" : 15,1985
		"year" : 1968
	}
}
{
	"_id" : ObjectId("615502c9246358961f04babe"),
	"name" : "David",
	"home_state" : "New York",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 11,
		"day" : 15,
		"year" : 1973
	}
}
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	}
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	}
}

//Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).
db.students.find({$or: [{ home_state: 'California' }, { home_state: 'Washington' }]})
/*
{ "_id" : ObjectId("61550294246358961f04babd"), "name" : "Bob" }
*/
{ "_id" : ObjectId("61550339246358961f04bac0"), "name" : "Eve" }

//Get all students whose lucky number is greater than 3//
db.students.find( { lucky_number : { $gt : 3 } } )

/*
{ "_id" : ObjectId("61550237246358961f04babc"), "name" : "Alice" }
{ "_id" : ObjectId("61550294246358961f04babd"), "name" : "Bob" }
{ "_id" : ObjectId("61550339246358961f04bac0"), "name" : "Eve" }

//Get all students whose lucky number is less than or equal to 10//
db.students.find( { lucky_number : { $le : 10 } })

{ "_id" : ObjectId("615502c9246358961f04babe"), "name" : "David" }
{ "_id" : ObjectId("615502fa246358961f04babf") , "name" : "Charlie" }

//Get all students whose lucky number is between 1 and 9 (inclusive)//
db.students.find( { lucky_number : { $gte : 1, $lt : 10 } } )

{ "_id" : ObjectId("615502c9246358961f04babe"), "name" : "David" }
{ "_id" : ObjectId("615502fa246358961f04babf"), "name" : "Charlie" }

//Add a field named 'interests' to all student documents in the collection. The field should be an array and contain the following entries: 'coding', 'brunch', MongoDB'. Add this field to all documents using a single command.//
> db.students.updateMany({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}})
{ "acknowledged" : true, "matchedCount" : 5, "modifiedCount" : 5 }
> db.students.find().pretty()
{
    "_id" : ObjectId("61550237246358961f04babc"),
    "name" : "Alice",
    "home_state" : "Texas",
    "lucky_number" : 7,
    "dob" : {
        "day" : 15,
        "month" : "January",
        "year" : 1980
    },
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

{
	"_id" : ObjectId("61550294246358961f04babd"),
	"name" : "Bob",
	"home_state" : "California",
	"lucky_number" : 42,
	"birthday" : {
		"month" : 10,
		"day" : 15,1985
		"year" : 1968
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("615502c9246358961f04babe"),
	"name" : "David",
	"home_state" : "New York",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 11,
		"day" : 15,
		"year" : 1973
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

//dd some unique interests for each particular student into each of their interest arrays.//
db.students.update({"name":"Charlie"},{"$addToSet": {"interests":"Golf"}})
db.students.update({"name":"Eve"},{"$push":{"interests":"Climbing"}})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 0,
	"nModified" : 0,
	"writeError" : {
		"code" : 9,
		"errmsg" : "Modifiers operate on fields but we found type string instead. For example: {$mod: {<field>: ...}} not {$push: \"Microsoft\"}"
	}
})
> db.students.find().pretty()
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21, "year" : 1981
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"Climbing"
	]
}

//Add the interest 'taxes' into someone's interest array.//
db.students.update(
   {"name": "Eve"}, 
   {$addToSet: {"interests": "Taxes"}}
)

> db.students.find().pretty()
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,  
		"year" : 1981
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"Climbing",
		"Taxes"
	]
}
//remove the 'taxes' interest you just added.//
db.students.update({"name":"Eve","interests.Taxes":true},{$pull:{"interests":{"Taxes":true}}} )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

//remove all students who are from California.//
db.students.remove({"home_state":"California"})
WriteResult({ "nRemoved" : 1 })
> db.students.find().pretty()
{
    "_id" : ObjectId("61550237246358961f04babc"),
    "name" : "Alice",
    "home_state" : "Texas",
    "lucky_number" : 7,
    "dob" : {
        "day" : 15,
        "month" : "January",
        "year" : 1980
    },
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

{
	"_id" : ObjectId("615502c9246358961f04babe"),
	"name" : "David",
	"home_state" : "New York",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 11,
		"day" : 15,
		"year" : 1973
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

//Remove a student by name.//
db.students.remove({"name":"Alice"})

//Remove a student whose lucky number is greater than 5 (JUST ONE)//
db.students.remove({"lucky_number":{$gt:5}})</s>

//Add a field to each student document called 'number_of_belts' and set it to 0.//
db.students.updateMany( {}, {"$set":{"number_of_belts":0}}, false )
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.students.find().pretty()
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	],
	"number_of_belts" : 0
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	],
	"number_of_belts" : 0
}

//Increment this field by 1 for all students in Washington (Seattle Dojo).//
db.students.updateMany( 
   { home_state: 'Washington' },  
   { $inc: { number_of_belts: 1 } } 
)
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.students.find().pretty()
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	],
	"number_of_belts" : 1
}

//Rename the 'number_of_belts' field to 'belts_earned'//
db.students.renameField('number_of_belts', 'belts_earned')
{
	"ok" : 0,
    "errmsg" : "Invalid use of type rename with no argument. Please specify a field to rename.",
    "code" : 9,
    "metadata" : {}
}
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.students.find().pretty()
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	],
	"belts_earned"  : 0
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"lucky_number" : 31,
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	],
	"belts_earned"  : 0
}

//Remove the 'lucky_number' field.//
db.students.updateMany( {}, {"$unset": {"lucky_number": ""}})
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.students.find().pretty()
{
    "_id" : ObjectId("61550237246358961f04babc"),
    "name" : "Alice",
    "home_state" : "Texas",
    "dob" : {
        "day" : 15,
        "month" : "January",
        "year" : 1980
    },
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

{
	"_id" : ObjectId("61550294246358961f04babd"),
	"name" : "Bob",
	"home_state" : "California",
	"birthday" : {
		"month" : 10,
		"day" : 15,1985
		"year" : 1968
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("615502c9246358961f04babe"),
	"name" : "David",
	"home_state" : "New York",
	"birthday" : {
		"month" : 11,
		"day" : 15,
		"year" : 1973
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("615502fa246358961f04babf"),
	"name" : "Charlie",
	"home_state" : "Florida",
	"birthday" : {
		"month" : 7,
		"day" : 8,
		"year" : 1974
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("61550339246358961f04bac0"),
	"name" : "Eve",
	"home_state" : "Washington",
	"birthday" : {
		"month" : 6,
		"day" : 21,
		"year" : 1981
	},
    "interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}

//Add a 'updated_on' field, and set the value as the current date.//
db.users.updateMany( {}, {"$set": {"updated_on": new Date()}}, false)